import Head from "next/head"
import styles from "../../styles/Home.module.css"
import { createUrqlClient } from "../../src/utils/createUrqlClient"
import { withUrqlClient } from "next-urql"
import { useLocationQuery } from "../../src/generated/graphql"
import { Formik, Field, Form, FormikHelpers } from "formik"
import { useRouter } from 'next/router';
import ConvertToJson from "../../src/utils/ConvertToJson"
import { useState } from "react"
import HoursInput from "../../src/src/components/HoursInput"
import axios from 'axios'

async function updateLocation(id, location){
    // const url = `https://api.yext.com/v2/accounts/me/entities/${id}?api_key=061b421ca1852bddfcf96e4138f49da4&v=20220202`
    const url = `http://localhost:4000/hooks/yext/${id}`
    let obj = {
        address: {
            line1: location.line1,
            city: location.city,
            region: location.region,
        },
        hours: {
            monday: {
                openIntervals: [{start: location.mondayOpen, end:location.mondayClose}]
            },
            tuesday: {
                openIntervals: [{start: location.tuesdayOpen, end: location.tuesdayClose}]
            },
            wednesday: {
                openIntervals: [{start: location.wednesdayOpen, end: location.wednesdayClose}]
            },
            thursday: {
                openIntervals: [{start: location.thursdayOpen, end: location.thursdayClose}]
            },
            friday: {
                openIntervals: [{start: location.fridayOpen, end: location.fridayClose}]
            },
            saturday: {
                openIntervals: [{start: location.saturdayOpen, end: location.saturdayClose}]
            },
            sunday: {
                openIntervals: [{start: location.sundayOpen, end: location.sundayClose}]
            }
        }
    }
    const result = await axios.put(url, obj)

    console.log('result', result)

}
const Location = () => {
    const router = useRouter()
    const intId = typeof router.query.id === 'string' ? router.query.id : -1
    const [{data, error, fetching}] = useLocationQuery({
        pause: intId === -1, // If we don't have an id, then stop the query.
        variables: {
            yextId: router.query.id
        }
        
    })
    const [location, setLocation ] = useState("")

    const [openHours, setOpeningHours] = useState([])

    if (!fetching && data && location == ""){
        Object.keys(data.location).forEach((key) => {
            try {
              data.location[key] = JSON.parse(data.location[key])
            } catch {
              data.location[key] = data.location[key]
            }
          })
        setLocation(data.location)
    }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!fetching && location ? (

            
              <Formik
                initialValues={{
                  c_locationName: location.c_locationName || "",
                  c_locationShortName: location.c_locationShortName || "",
                  line1: location.address.line1 || "",
                  city: location.address.city || "",
                  state: location.address.region || "",
                  description: location.description || "",
                  c_cateringURL: location.c_cateringURL || "",
                  c_infoBanner: location.c_infoBanner || "",
                  mondayOpen: location.hours.monday.openIntervals[0].start || "",
                  mondayClose: location.hours.monday.openIntervals[0].end || "",
                  tuesdayOpen: location.hours.tuesday.openIntervals[0].start || "",
                  tuesdayClose: location.hours.tuesday.openIntervals[0].end || "",
                  wednesdayOpen: location.hours.wednesday.openIntervals[0].start || "",
                  wednesdayClose: location.hours.wednesday.openIntervals[0].end || "",
                  thursdayOpen: location.hours.thursday.openIntervals[0].start || "",
                  thursdayClose: location.hours.thursday.openIntervals[0].end || "",
                  fridayOpen: location.hours.friday.openIntervals[0].start || "",
                  fridayClose: location.hours.friday.openIntervals[0].end || "",
                  saturdayOpen: location.hours.saturday.openIntervals[0].start || "",
                  saturdayClose: location.hours.saturday.openIntervals[0].end || "",
                  sundayOpen: location.hours.sunday.openIntervals[0].start || "",
                  sundayClose: location.hours.sunday.openIntervals[0].end || "",

                }}
                onSubmit={async (values) => {
                    await updateLocation(intId, values)
                //   await new Promise((r) => setTimeout(r, 500))
                //   alert(JSON.stringify(values, null, 2))
                }}>
                <Form>
                  <div className="formGroup">
                  <label htmlFor="c_locationName">Name</label>
                  <Field id="c_locationName" name="c_locationName" placeholder="Jane" />
                  <br/>

                  <label htmlFor="c_locationShortName">Short name</label>
                  <Field id="c_locationShortName" name="c_locationShortName" placeholder="Jane" />
                  </div>

                <div className="formGroup">
                <label htmlFor="line1">Street</label>
                  <Field id="line1" name="line1" placeholder="Jane" />
                
                  <label htmlFor="city">City</label>
                  <Field id="city" name="city" placeholder="City" />
                  <label htmlFor="state">state</label>
                  <Field id="state" name="state" placeholder="state" />
                <br />
                </div>
                <div className="formGroup">
                    <HoursInput hours={location.hours} />
                </div>
                  <button type="submit">Submit</button>
                </Form>
              </Formik>

        ) : (
          <h1>Loading</h1>
        )}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  )
}
export default withUrqlClient(createUrqlClient, { ssr: false })(Location)
